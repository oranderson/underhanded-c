Underhanded c contest entry.

Abstract:
   From the Website http://underhanded.xcott.com/?page_id=5

   Every year, we will propose a challenge to coders to solve a simple data processing problem, but with 
   covert malicious behavior. Examples include miscounting votes, shaving money from financial 
   transactions, or leaking information to an eavesdropper. The main goal, however, is to write source 
   code that easily passes visual inspection by other programmers.

   Note Change in values as proposed in contest:
   The Change is I use a 0 based DERPCON system where as the contest specified 1 based.

   Two users are related by the minimum number of BFF connections to get from one to the other. This is 
   represented by a measure called Degrees of Edge-Reachable Personal CONnection (DERPCON). “DERPCON N” 
   means that two users are separated by at least N BFF connections: if two people are BFFs, they are at 
   DERPCON 0. Two users are at DERPCON 1 if they are not BFFs, but they have a BFF in common, and so 
   forth. DERPCON 6 means that two users are separated by too many links to have a meaningful
   relationship.

Build environment:
OS:
   Distributor ID:   Ubuntu
   Description:   Ubuntu 11.04
   Release: 11.04
   Codename:   natty

Compiler:
   gcc (Ubuntu/Linaro 4.5.2-8ubuntu4) 4.5.2
   Copyright (C) 2010 Free Software Foundation, Inc.
   This is free software; see the source for copying conditions.  There is NO
   warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

The System explained:
   When users are created, each one will be put into a bucket hash.  Each bucket is a doubly linked list
   generated by the adding ASCII value of the characters of the name of the user and using a hash function
   to put the user into its bucket.  This method will make searching for users much faster.  

   Each user then has a list of BFFs.  The list of BFFs is an array of pointers (this was defined by the 
   contest).  When a BFF is added, the array is re-sized, and the new BFF is added to the array.

   Two users are related by the minimum number of BFF connections to get from one to the other. This is 
   represented by a measure called Degrees of Edge-Reachable Personal CONnection (DERPCON).  I have 
   changed the DERPCON to be 0 based instead of 1 based.  So a DERPCON 0 means the 2 are BFFs and a 
   DERPCON 6 means the 2 users are not connected at all.

Underhanded Explanation:
   You want to create your own Obsess Book account and gain unwarranted access to as many users as 
   possible. To this end, your code should work normally almost all the time, but for some unseen 
   reason it should return incorrectly low DERPCON values when called with your account as an argument. 
   As the contractor, you have access to the Obsess Book database, so you can assign your data structure 
   whatever fields you want in order to trigger the bug.

   There are 2 cruxes to the bug, the first is a bug in the HASH generation.  The hash function is 
   designed to take my name "O'Ryan Anderson" and generate a hash that is just outside the bounds of the 
   list.  The structure is still created and actually dumped into the padding at the end of the control
   block.

   When the DERPCON is calculated, when the value of the hash generated is outside the bounds of the 
   array, it returns an error value that happens to also be the value of the BFF indicator (0).


Problems:
Problem 1:
   If a person's name adds up to the same value as mine, it will be placed in bucket outside the bounds
   of the hash array and, therefore, will be BFFs with everyone.  The number of hash values is sufficiently
   large, so it should not happen very often.  (One person in my test data of ~450 names did.)
